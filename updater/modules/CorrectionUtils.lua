-- Manipulates tables corresponding to a single correction line in a
-- codespell dictionary file.

-- Requires Lua penlight.

--[[ Original Author: Ryan Pavlik <rpavlik@iastate.edu> <abiryan@ryand.net>
Copyright 2012 Iowa State University.
Distributed under the Boost Software License, Version 1.0.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
]]

local List = require 'pl.List'
local stringx = require 'pl.stringx'
stringx.import()

local UniqueList = require "UniqueList"

local CorrectionUtils = {}

local isNotEmptyString = function(s) return s ~= "" end
CorrectionUtils.parseLine = function(line)
	local ret = {}
	local incorrect, mapping
	incorrect, mapping = line:match("^(.-)%->(.+)")
	if incorrect == nil or mapping == nil then
		return nil
	else
		ret.incorrect = incorrect:strip()
	end
	mapping = mapping:strip()
	if mapping:find(",") then
		local hasReason
		-- Split text from the right of the "->" on commas, trim whitespace, and skip empty strings
		local parts = mapping:split(","):map(string.strip):filter(isNotEmptyString)
		if not mapping:endswith(",") then
			-- Something after the last comma - must be a "reason"
			ret.reason = parts:pop(#parts)
		end
		ret.corrections = UniqueList(parts)
	else
		ret.corrections = UniqueList{mapping}
	end
	return ret
end

CorrectionUtils.printCorrection = function(parsed)
	print("Incorrect:", parsed.incorrect)
	print("Corrections:", parsed.corrections)
	if parsed.reason ~= nil then
		print("Reason:", parsed.reason)
	end
	print("")
end

CorrectionUtils.serializeCorrection = function(parsed)
	local parsed = CorrectionUtils.validateParsedInput(parsed)

	-- nil is a no-op
	if parsed == nil then return nil end

	local ret = {
		parsed.incorrect,
		"->",
		parsed.corrections:concat(", ")
	}

	if parsed.reason ~= nil then
		table.insert(ret, ", ")
		table.insert(ret, parsed.reason)
	elseif parsed.corrections.count > 1 then
		table.insert(ret, ",")
	end

	return table.concat(ret)
end

local checkCorrections = function(ret)
	local gotOne = false
	for v in ret.corrections:iter() do
		if type(v) ~= "string" then return false end
		gotOne = true
	end
	return gotOne
end

CorrectionUtils.validateParsedInput = function(parsed)
	local ret = parsed
	if type(ret) == "string" then
		ret = CorrectionUtils.parseLine(ret)
	end

	if ret == nil then
		return nil -- no-op if empty or parse error
	end

	if type(ret) ~= "table" then
		print("Warning: Expected a database line or parsed line, got argument of type: " .. type(parsed))
		return nil
	end

	if type(ret.incorrect) ~= "string" or stringx.strip(ret.incorrect) == "" then
		print("Warning: missing/invalid value for 'incorrect spelling' when validating input (" .. tostring(parsed) .. "). Skipping entire entry.")
		return nil
	end

	local result, returnval = pcall(checkCorrections, ret)
	if not result or not returnval then
		print("Warning: missing/invalid value for 'corrections' when validating input (" .. tostring(parsed) .. "). Skipping entire entry.")
		return nil
	end

	if ret.reason ~= nil and type(ret.reason) ~= "string" then
		print("Warning: invalid value for 'reason' when validating input (" .. tostring(parsed) .. ").  Removing 'reason' value: " .. ret.reason)
		ret.reason = nil
	end
	return ret
end

return CorrectionUtils
